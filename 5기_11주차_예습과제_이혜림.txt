class sklearn.linear_model.LinearRegression(fit_intercept=True, nomarlizer=False,copy_X=True, n_jobs=1)
import numpy as np
import matplotlib.pyplot as plt
import pandasd as pd
import seaborn as sns
form scipy import stats
from sklearn.datasets import load_boston
%marplotlib inline
boston = load_boston()
bostomDF = pd.DataFrame(boston.data, columns=boston.feature_names)
bostonDF["PRICE"] = boston.target
print("Boston 데이터 세트 크기 :", bostonDf.shape)
bostonDF.head()

fig.axs = plt.subplots(figsize = (16,8), ncols = 4, nrows = 2)
lm_features  = ["RM", "ZN", "INDUS", "NOX"", "AGE","PTRATIO", LSTAT","RAD"]
for i, feature in enumerate(lm_features):
	ros = int(i/4)
	col = i%4
	sns.regplot(x=feature, y="PRICE, data= bostonDF, ax=axs[row][col])

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squres_error, r2_score

y_target = bostonDF["PRICE"]
X_data = bostonDF.drop(["PRICE"], axis=1, inplace=  False)

X_trian, X_test ,y_train, y_test = train_test_split(X_data,y_target,test_xize = 0.3, random_state = 156)
lr = LinearRegression()
lr.fit(X_train, y_train)
y_preds = lr.predict(X_test)
mse = mean_squred_error(y_test, y_preds)
rmse = np.sqrt(mse)

print("절편 값".lr.intercept_)
print("회귀 계수값", np.round(lr.coef_,1))

coeff = pd.Series(data = np.round(lr.coef_,1), index= X_data.columns))
coeff.sort_values(ascending = False)

from skelarn.model_selection import cross_val_score
y_target = bostonDf["PRICE"}
X__data = bostonDF.drop(["PRICE"], axis=1, inplace= False)
lr = LinearRegrssion()

from sklearn.preprocession import PolynomialFeatures
import numpy as np

polt_ftr = PolynomialFeatures(degree = 3).fit_transfrom(X)

poly = PolynomialFeatues(degree=2)
poly.fit(X)
poly_ftr = poly.transform(X)

print("변환된 2차 다항식 계수", poly_ftr)

from sklearn.pipeline import Pipeline

model = Pipeline(([("Poly", "PolynomialFeatures(dregree=3)),
"linear ", LinearRegression)))[)

def true_fun(X):
	return np.cos(1.5 * np.pi * X)
X = np.sort(np.random.rand(n_samples))

y= true_fun(X) + np.random.randn(n_samples) * 0.1





